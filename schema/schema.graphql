module.exports =
    `
    type Query {
        info: String!

        feed(
            filter: String
            skip: Int
            first: Int
            orderBy: LinkOrderBy
        ): Feed!

        currentUser: User
    }

    type Mutation {
        signUp(
            name: String!
            email: String!
            password: String!
        ) : AuthPayload

        login(
            email: String!
            password: String!
        ) : AuthPayload

        createCluster(
            clusterName: String!
        ) : Cluster!

        createPosition(
            positionName: String!
        ) : Position!

        addMember(
            clusterId: ID!
            memberId: ID!
        ) : ClusterMember!

        post(
            url: String!
            description: String!
        ): Link!

        vote(
            linkId: ID!
        ) : Vote
    }

    type Subscription {
        newLink: Link
        newVote: Vote
    }

    type User {
        id: ID!
        user_id: String!
        name: String!
        email: String!
        password: String
        links: [Link!]!
        clusters: [Cluster!]!
    }

    type AuthPayload {
        token: String
        user: User
    }

    type Link {
        id: ID!
        description: String!
        url: String!
        postedBy: User
        votes: [Vote!]!
    }

    enum LinkOrderBy {
        description_ASC
        description_DESC
        url_ASC
        url_DESC
        createdAt_ASC
        createdAt_DESC
    }

    type Vote {
        id: ID!
        link: Link!
        voter: User!
    }

    type Feed {
        links: [Link!]!
        count: Int!
    }

    type Cluster {
        id: ID!
        clusterName: String!
        clusterHead: User!
        positions: [Position!]!
    }

    type Position {
        id: ID!
        positionName: String!
        open: Boolean!
        nominees: [User!]!
    }

    type ClusterMember {
        id: ID!
        cluster: Cluster!
        member: User!
    }
    `